{
  "title": "Sprint-boot-03: 事务简单",
  "cells": [
    {
      "type": "markdown",
      "data": "https://www.cnblogs.com/kangoroo/p/8192503.html\n"
    },
    {
      "type": "markdown",
      "data": "## 3、Service层\n\n* 在设计service层的时候，应该合理的抽象出方法包含的内容。\n\n* 然后将方法用@Trasactional注解注释，默认的话在抛出Exception.class异常的时候，就会触发方法中所有数据库操作回滚，当然这指的是增、删、改。\n\n* 当然，@Transational方法是可以带参数的，具体的参数解释如下\n\n\n```java\n@Service\npublic class GeoFenceService {\n\n    @Autowired\n    private MoonlightMapper moonlightMapper;\n\n    @Transactional\n    public int addGeoFence(GeoFence geoFence) {\n        String formatTime = TimeFunction.transTimeToFormatPerfect(System.currentTimeMillis());\n        geoFence.setCreateTime(formatTime);\n        geoFence.setUpdateTime(formatTime);\n        return moonlightMapper.insertOne(geoFence);\n    }\n\n    @Transactional\n    public int batchGeoFence(List<GeoFence> geoFenceList) {\n        String formatTime = TimeFunction.transTimeToFormatPerfect(System.currentTimeMillis());\n        for (GeoFence geoFence : geoFenceList) {\n            geoFence.setCreateTime(formatTime);\n            geoFence.setUpdateTime(formatTime);\n        }\n        return moonlightMapper.insertBatch(geoFenceList);\n    }\n}\n```\n\n"
    },
    {
      "type": "markdown",
      "data": "## 4、开启事务\n\n* 最后你要在Application类中开启事务管理，开启事务管理很简单，只需要@EnableTransactionManagement注解就行\n\n```java\n@EnableTransactionManagement\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n"
    },
    {
      "type": "markdown",
      "data": "### 5,测试一下\n\n* 可以做一个简单的测试，主动抛出异常，测试一下是否真的能保证事务性。\n\n* 在执行完插入之后，手动抛出一个空指针异常，可以发现数据真的回滚了。\n\n```java\n@Service\npublic class GeoFenceService {\n\n    @Autowired\n    private MoonlightMapper moonlightMapper;\n\n    @Transactional\n    public int addGeoFence(GeoFence geoFence) {\n        String formatTime = TimeFunction.transTimeToFormatPerfect(System.currentTimeMillis());\n        geoFence.setCreateTime(formatTime);\n        geoFence.setUpdateTime(formatTime);\n        int count = moonlightMapper.insertOne(geoFence);\n        String a = null;\n        a.indexOf('c');\n        return count;\n    }\n}\n```"
    }
  ]
}
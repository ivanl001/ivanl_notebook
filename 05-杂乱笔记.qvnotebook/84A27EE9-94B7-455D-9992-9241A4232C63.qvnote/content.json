{
  "title": "Sprint-boot-04: Spring Boot日志系统logback简单使用",
  "cells": [
    {
      "type": "markdown",
      "data": "## 1, 首先在application.properties中配置两个属性\n\n```properties\n# 设置日志\nlogging.file=estore_web\n# 注意：这个path配置是lagback的配置，sprigboot默认不识别，需要配置logback-spring.xml才行\n# 为什么不配置logback.xml,因为logback.xml会先application.properties加载，而logback-spring.xml会后于application.properties加载，这样我们在application.properties文中设置日志文件名称和文件路径才能生效。\nlogging.path=/Users/ivanl001/Desktop/bigData/springboot/logs/\n```"
    },
    {
      "type": "markdown",
      "data": "## 2, 在资源根目录下生成logback-spring.xml文件，配置如下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration>\n\n    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->\n    <!--我已经在application.properties中定义过了，所以这里不用-->\n    <!--<property name=\"LOG_HOME\" value=\"/data/springboot/logs\" />-->\n\n\n\n    <!--这里相当于定义一个STDOUT的控制台输出模版，后面会引用-->\n    <!-- 控制台输出 -->\n    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->\n    <!-- appender是configuration的子节点，是负责写日志的组件。 -->\n    <!-- ConsoleAppender：把日志输出到控制台 -->\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n\n\n    <!--这里相当于定义一个文件滚动模版，后面会引用-->\n    <!-- 按照每天生成日志文件 -->\n    <appender name=\"FILE\"  class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!--日志文件输出的文件名-->\n            <!--<FileNamePattern>${LOG_PATH}/${LOG_FILE}.%d{yyyy-MM-dd}.log</FileNamePattern>-->\n            <!--这个是上面的完善版，按月归档，按天滚动-->\n            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM,aux}/${LOG_FILE}.%d{yyyy-MM-dd}-%i.log</fileNamePattern>\n            <!--日志文件保留天数-->\n            <MaxHistory>30</MaxHistory>\n\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <!-- 除按日志记录之外，还配置了日志文件不能超过10M(默认)，若超过10M，日志文件会以索引0开始， -->\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n\n        </rollingPolicy>\n\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\n        </encoder>\n\n        <!--日志文件最大的大小,写这个好像不对-->\n        <!--<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n            <MaxFileSize>1MB</MaxFileSize>\n        </triggeringPolicy>-->\n\n    </appender>\n\n\n\n    <!--myibatis log configure-->\n    <!--<logger name=\"com.apache.ibatis\" level=\"TRACE\"/>\n    <logger name=\"java.sql.Connection\" level=\"DEBUG\"/>\n    <logger name=\"java.sql.Statement\" level=\"DEBUG\"/>\n    <logger name=\"java.sql.PreparedStatement\" level=\"DEBUG\"/>-->\n\n\n    <!-- 日志输出级别 -->\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n        <appender-ref ref=\"FILE\" />\n    </root>\n\n\n    <!--日志异步到数据库 -->\n    <!--<appender name=\"DB\" class=\"ch.qos.logback.classic.db.DBAppender\">\n        &lt;!&ndash;日志异步到数据库 &ndash;&gt;\n        <connectionSource class=\"ch.qos.logback.core.db.DriverManagerConnectionSource\">\n            &lt;!&ndash;连接池 &ndash;&gt;\n            <dataSource class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\n                <driverClass>com.mysql.jdbc.Driver</driverClass>\n                <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>\n                <user>root</user>\n                <password>root</password>\n            </dataSource>\n        </connectionSource>\n    </appender>-->\n\n\n</configuration>\n\n```\n\n"
    },
    {
      "type": "markdown",
      "data": "## 重启项目即可"
    }
  ]
}
{
  "title": "03-Hadoop-0610-Combiner",
  "cells": [
    {
      "type": "markdown",
      "data": "* *Combiner其实就是Reducer，只不过是map端的聚合，可以在shuffle之前直接聚合*\n\n* *但是也不是所有的reduce可以做成combiner的，比如求最大和最小的差值或者求所有值的平均值，就不能用combiner等*\n\n* 这个是我们自定义的Combiner\n\n```java\npackage im.ivanl001.bigData.Hadoop.A07_combiner;\n\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Reducer;\n\nimport java.io.IOException;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-10-24 15:33\n * #description : 本地聚合\n **/\npublic class IMCombiner extends Reducer<Text, IntWritable, Text, IntWritable> {\n\n    @Override\n    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n\n        System.out.println(\"--------------------------------combiner--------------------------------------\"+ Thread.currentThread().getName());\n        System.out.println();\n\n        int count = 0;\n        for (IntWritable intWritable : values) {\n            count = count + intWritable.get();\n        }\n        context.write(key, new IntWritable(count));\n    }\n\n\n}\n```\n\n\n* 然后把Combiner设置到job中去。\n\n```java\npackage im.ivanl001.bigData.Hadoop.A07_combiner;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n\nimport java.io.IOException;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-10-20 19:35\n * #description : wordcount\n **/\npublic class IMWordCountApp {\n\n    /*\n     * mapper过程之后产生的文件的命名中是***-m-00000*什么的，m代表是mapper，后面的数字代表是分区\n     * reducer过程之后产生的文件的命名中是***-r-00000*什么的，r代表的是reducer，后面的数字代表的也是分区\n     * 如果设置三个reducer，在没有重写分区函数的情况下，会有三个r，也就会有三个输出文件，因为一个reducer会有一个输出文件\n     * 如果重写了分区函数，其实也会生成三个文件，但是只有算法中有指向的才会有内容，其他的就是空文件了\n     * */\n    public static void main(String[] args) {\n\n        try {\n\n            if (args.length != 2) {\n                System.out.println(\"参数个数有误！\");\n                return;\n            }\n\n            //\"/users/ivanl001/Desktop/bigData/input/zhang.txt\"\n            String inputFileStr = args[0];\n            String outputFolderStr = args[1];\n\n            //0，创建配置对象，以修正某些配置文件中的配置\n            Configuration configuration = new Configuration();\n            //这里一旦设置单机版就会出错，而且不能有core-default.xml文件，这个文件中一旦配置也会有问题，不知道为啥，先过\n//            configuration.set(\"fs.defaultFS\", \"file:///\");\n            //configuration.set(\"fs.hdfs.impl\", org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());\n            //configuration.set(\"fs.file.impl\", org.apache.hadoop.fs.LocalFileSystem.class.getName());\n\n            //这里因为文件存在，总是需要删除，麻烦，所以直接程序自动删除\n            FileSystem.get(configuration).delete(new Path(outputFolderStr));\n\n\n            //1，创建作业\n            Job wordcountJob = Job.getInstance(configuration);\n            wordcountJob.setJobName(\"wordcountApp\");\n            //之前这句没写，就会一直报错，什么mapper类找不到，这里需要注意一下\n            wordcountJob.setJarByClass(IMWordCountApp.class);\n\n            //--------------------------------这里设置输出格式类------------------------------------\n            //这个是设置输出格式为------------序列文件输出格式-------------，我这里并不想保存序列文件，所以这里就不设置\n            //wordcountJob.setOutputFormatClass(SequenceFileOutputFormat.class);\n\n\n            //2,设置作业输入\n            //这句话可以不加，因为默认就是文本输入格式\n            wordcountJob.setInputFormatClass(TextInputFormat.class);\n            FileInputFormat.addInputPath(wordcountJob, new Path(inputFileStr));\n\n            //3，设置mapper\n            wordcountJob.setMapperClass(IMWordCountMapper.class);\n            wordcountJob.setMapOutputKeyClass(Text.class);\n            wordcountJob.setMapOutputValueClass(IntWritable.class);\n\n\n\n            //----中间设置一下分区函数\n            wordcountJob.setPartitionerClass(IMPartitioner.class);\n\n            //combiner是在分区之后进行的，所以在这里设置combiner\n            //其实这个combiner的内容和reducer是一样的，这里直接设置成IMWordCountReducer这个类也是可以的，为了区分明显，我这里才重新复制改名字使用\n            wordcountJob.setCombinerClass(IMCombiner.class);\n\n\n\n            //4, 设置reducer\n            wordcountJob.setReducerClass(IMWordCountReducer.class);\n            //每个reduce会产生一个输出结果或者输出文件，这里设置一个reduce\n            wordcountJob.setNumReduceTasks(2);//设置reducer的个数，如果是0就是不需要r\n            //设置输出的key和value的类型\n            wordcountJob.setOutputKeyClass(Text.class);\n            wordcountJob.setOutputValueClass(IntWritable.class);\n\n            //5, 设置输出\n            wordcountJob.setOutputValueClass(FileOutputFormat.class);\n            FileOutputFormat.setOutputPath(wordcountJob, new Path(outputFolderStr));\n\n            //6，提交，开始处理\n            wordcountJob.waitForCompletion(false);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```"
    }
  ]
}
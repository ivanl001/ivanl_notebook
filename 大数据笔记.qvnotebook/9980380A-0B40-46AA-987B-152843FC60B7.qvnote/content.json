{
  "title": "03-Hadoop-0505-MR",
  "cells": [
    {
      "type": "markdown",
      "data": "## 0, 基本概念\n### 01，Map\n* map中的输入的key是这一行的偏移量，所以总是LongWritable\n\n### 02，Reduce\n* reduce的个数决定map分区的个数\n\n### 03，Shuffle\n* 这个是map和reduce之间的数据分发的过程"
    },
    {
      "type": "markdown",
      "data": "## 1，wordCount案例"
    },
    {
      "type": "markdown",
      "data": "### 01，需要处理的文本\n```text\nivanl is the king of world!\nDo you know why?\nBecause he is awesome and \nhe can do any crazy thing in the world!\n```"
    },
    {
      "type": "markdown",
      "data": "### 02, mapper"
    },
    {
      "type": "markdown",
      "data": "```java\npackage im.ivanl001.bigData.Hadoop.WordCount;\n\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Mapper;\n\nimport java.io.IOException;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-10-20 19:23\n * #description : mapper\n **/\npublic class IMWordCountMapper extends Mapper<LongWritable, Text, Text, IntWritable>{\n\n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n        System.out.println(\"key:\" + key + \",value:\" + value);\n        String[] splitStr = value.toString().split(\" \");\n        Text outText = new Text();\n        IntWritable outInt = new IntWritable();\n        for (String str : splitStr) {\n            outText.set(str);\n            outInt.set(1);\n            //这里是意思就是把每个单词拼成(zhang,1), (li, 1), (dan, 1)类似的格式传给reduce\n            context.write(outText, outInt);\n        }\n    }\n}\n```"
    },
    {
      "type": "markdown",
      "data": "### 03，reducer"
    },
    {
      "type": "markdown",
      "data": "```java\npackage im.ivanl001.bigData.Hadoop.WordCount;\n\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Reducer;\n\nimport java.io.IOException;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-10-20 19:30\n * #description : reducer\n **/\npublic class IMWordCountReducer extends Reducer<Text, IntWritable, Text, IntWritable> {\n\n\n    @Override\n    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n        int count = 0;\n        for (IntWritable intWritable : values) {\n            count = count + intWritable.get();\n        }\n        context.write(key, new IntWritable(count));\n    }\n}\n```"
    },
    {
      "type": "markdown",
      "data": "### 04，app"
    },
    {
      "type": "markdown",
      "data": "```java\npackage im.ivanl001.bigData.Hadoop.WordCount;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n\nimport java.io.IOException;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-10-20 19:35\n * #description : wordcount\n **/\npublic class IMWordCountApp {\n\n    public static void main(String[] args) {\n\n        try {\n\n            if (args.length != 2) {\n                System.out.println(\"参数个数有误！\");\n                return;\n            }\n\n            //\"/users/ivanl001/Desktop/bigData/input/zhang.txt\"\n            String inputFileStr = args[0];\n            String outputFolderStr = args[1];\n\n            //0，创建配置对象，以修正某些配置文件中的配置\n            Configuration configuration = new Configuration();\n            //这里一旦设置单机版就会出错，而且不能有core-default.xml文件，这个文件中一旦配置也会有问题，不知道为啥，先过\n            //configuration.set(\"fs.defaultFS\", \"file:///\");\n            //configuration.set(\"fs.hdfs.impl\", org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());\n            //configuration.set(\"fs.file.impl\", org.apache.hadoop.fs.LocalFileSystem.class.getName());\n\n            //这里因为文件存在，总是需要删除，麻烦，所以直接程序自动删除\n            FileSystem.get(configuration).delete(new Path(outputFolderStr));\n\n            //1，创建作业\n            Job wordcountJob = Job.getInstance(configuration);\n            wordcountJob.setJobName(\"wordcountApp\");\n\n            //2,设置作业输入\n            //这句话可以不加，因为默认就是文本输入格式\n            wordcountJob.setInputFormatClass(TextInputFormat.class);\n            FileInputFormat.addInputPath(wordcountJob, new Path(inputFileStr));\n\n            //3，设置mapper\n            wordcountJob.setMapperClass(IMWordCountMapper.class);\n            wordcountJob.setMapOutputKeyClass(Text.class);\n            wordcountJob.setMapOutputValueClass(IntWritable.class);\n\n            //4, 设置reducer\n            wordcountJob.setReducerClass(IMWordCountReducer.class);\n            //每个reduce会产生一个输出结果或者输出文件，这里设置一个reduce\n            wordcountJob.setNumReduceTasks(1);\n            //设置输出的key和value的类型\n            wordcountJob.setOutputKeyClass(Text.class);\n            wordcountJob.setOutputValueClass(IntWritable.class);\n\n            //5, 设置输出\n            //wordcountJob.setOutputValueClass(FileOutputFormat.class);\n            FileOutputFormat.setOutputPath(wordcountJob, new Path(outputFolderStr));\n\n            //6，提交，开始处理\n            wordcountJob.waitForCompletion(false);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
    },
    {
      "type": "markdown",
      "data": "### 05, 最终的处理的结果如下\n\n```\nBecause\t1\nDo\t1\nand\t1\nany\t1\nawesome\t1\ncan\t1\ncrazy\t1\ndo\t1\nhe\t2\nin\t1\nis\t2\nivanl\t1\nking\t1\nknow\t1\nof\t1\nthe\t2\nthing\t1\nwhy?\t1\nworld!\t2\nyou\t1\n```"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}
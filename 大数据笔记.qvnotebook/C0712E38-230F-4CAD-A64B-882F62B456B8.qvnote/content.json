{
  "title": "03-Hadoop-0608-SequenceFile序列文件的相关操作",
  "cells": [
    {
      "type": "markdown",
      "data": "* seq文件压缩的两种方式：value压缩和块压缩\n* 默认情况下seek只能恰好seek在同步点上才能正常的进行查找，否则会报错EOF，用sync可以\n* 也就是因为seq文件有同步点，所以它才是可分割的\n* \n\n* value压缩\n  ![IMAGE](quiver-image-url/517BDF1593CFB05BDF8253BB1F40C19F.jpg =790x467)\n\n* 块压缩\n  ![IMAGE](quiver-image-url/0C2C486999545A6719527748F94AA981.jpg =807x379)\n\n\n\n*没时间整理，先放在这里之后整理哈*\n\n```java\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.SequenceFile;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.compress.DeflateCodec;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.net.URI;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-10-23 21:17\n * #description :\n **/\npublic class A03_SequenceFile {\n\n    @Test\n    public void sequenceFileCompressBlock() throws Exception{\n\n        String pathStr = \"/Users/ivanl001/Desktop/bigData/compress/zhang_compress_block.seq\";\n        Path path = new Path(pathStr);\n\n        Configuration configuration = new Configuration();\n        FileSystem fileSystem = FileSystem.get(configuration);\n\n\n        IntWritable key = new IntWritable();\n        Text value = new Text();\n        SequenceFile.Writer writer = SequenceFile.createWriter(fileSystem, configuration, path, key.getClass(), value.getClass(), SequenceFile.CompressionType.BLOCK, new DeflateCodec());\n\n\n        for(int i=0;i<100;i++){\n            writer.append(new IntWritable(i), new Text(\"ivanl00\"+i));\n            //默认会有默认的添加同步点的方式，不过如果想要特定的地方添加同步点，方便读取的时候进行读取，可以使用下面的方式添加同步点\n            //同时添加同步点也会让文件变大\n            if (i % 10 == 0) {\n                writer.sync();//如果是10的个数，那个添加一个同步点\n            }\n        }\n\n        for (int i = 0; i < 10; i++) {\n            writer.append(new IntWritable(i), new Text(\"ivanl00\"+i));\n        }\n\n        writer.close();\n    }\n\n\n\n    //seq文件压缩的两种方式：value压缩和块压缩\n    //先介绍一下value压缩\n    @Test\n    public void sequenceFileCompressValue() throws Exception{\n\n        String pathStr = \"/Users/ivanl001/Desktop/bigData/compress/zhang_compress.seq\";\n        Path path = new Path(pathStr);\n\n        Configuration configuration = new Configuration();\n        FileSystem fileSystem = FileSystem.get(configuration);\n\n\n        IntWritable key = new IntWritable();\n        Text value = new Text();\n        SequenceFile.Writer writer = SequenceFile.createWriter(fileSystem, configuration, path, key.getClass(), value.getClass(), SequenceFile.CompressionType.RECORD, new DeflateCodec());\n\n\n        for(int i=0;i<100;i++){\n            writer.append(new IntWritable(i), new Text(\"ivanl00\"+i));\n            //默认会有默认的添加同步点的方式，不过如果想要特定的地方添加同步点，方便读取的时候进行读取，可以使用下面的方式添加同步点\n            //同时添加同步点也会让文件变大\n            if (i % 10 == 0) {\n                writer.sync();//如果是10的个数，那个添加一个同步点\n            }\n        }\n\n        for (int i = 0; i < 10; i++) {\n            writer.append(new IntWritable(i), new Text(\"ivanl00\"+i));\n        }\n\n        writer.close();\n    }\n\n\n\n    //同步点的分析\n    @Test\n    public void sequenceFileAnaylize() throws Exception{\n\n        //读取文件路径\n        String pathStr = \"/Users/ivanl001/Desktop/bigData/compress/zhang.seq\";\n        Configuration configuration = new Configuration();\n        FileSystem fileSystem = FileSystem.get(configuration);\n\n        Path path = new Path(pathStr);\n        SequenceFile.Reader reader = new SequenceFile.Reader(fileSystem, path, configuration);\n\n        IntWritable key = new IntWritable();\n        Text value = new Text();\n\n        long position = reader.getPosition();\n        System.out.println(position);\n\n        //默认情况下seek只能恰好seek在同步点上才能正常的进行查找，否则会报错EOF，用sync可以\n//        reader.seek(837);//838是同步点，所以seek到838没问题，但是如果seek到837就会报错\n        //可以使用sync，会自动找到下一个同步点,但是如果是小文件，很可能只有开头一个同步点，这样子的话可能就不会读出任何内容，但是也不会报错\n//        reader.sync(380);\n        //reader.sync(837);//这里使用837也可以正常的找到837后面一个同步点\n\n        long time01 = System.currentTimeMillis();\n\n        reader.sync(35773011);\n        //也就是因为seq文件有同步点，所以它才是可分割的\n\n\n        while (reader.next(key)) {\n            reader.getCurrentValue(value);\n            System.out.println(\"position:\" + reader.getPosition() + \", key:\" + key + \", value:\" + value);\n        }\n\n        long time02 = System.currentTimeMillis();\n        System.out.println(\"time:\" + (time02 - time01));\n    }\n\n\n\n\n    //序列文件的读取\n    @Test\n    public void sequenceFileRead() throws Exception{\n\n        String pathStr = \"/Users/ivanl001/Desktop/bigData/compress/zhang.seq\";\n        Configuration configuration = new Configuration();\n        //设置本地系统\n        configuration.set(\"fs.defaultFS\", \"file:///\");\n\n        FileSystem fileSystem = FileSystem.get(configuration);\n\n\n        Path path = new Path(pathStr);\n        SequenceFile.Reader reader = null;\n\n        reader = new SequenceFile.Reader(fileSystem, path, configuration);\n\n        IntWritable key = new IntWritable();\n        Text value = new Text();\n\n        //第一种方式\n        /*while (reader.next(key, value)) {\n            System.out.println(key.get() + \":\" + value.toString());\n            System.out.println(\"-------------\");\n        }*/\n\n        //第二种方式\n        while (reader.next(key)) {\n            reader.getCurrentValue(value);\n            System.out.println(\"position: \" + reader.getPosition() + \", \" + key.get() + \":\" + value.toString());\n        }\n    }\n\n\n\n\n\n\n    //序列文件的写入\n    @Test\n    public void sequenceFileSave() throws IOException {\n\n        //hadoop SequenceFileWriteDemo numbers.seq\n\n        String uri = \"/Users/ivanl001/Desktop/bigData/input01/seq/seq01.seq\";\n        Configuration conf = new Configuration();\n        FileSystem fs = FileSystem.get(URI.create(uri), conf);\n        Path path = new Path(uri);\n        IntWritable key = new IntWritable();\n        Text value = new Text();\n\n        SequenceFile.Writer writer = null;\n        try {\n            writer = SequenceFile.createWriter(fs, conf, path, key.getClass(), value.getClass());\n            for(int i=0;i<10;i++){\n                writer.append(new IntWritable(i), new Text(\"ivanl00\"+i));\n\n                //默认会有默认的添加同步点的方式，不过如果想要特定的地方添加同步点，方便读取的时候进行读取，可以使用下面的方式添加同步点\n                //同时添加同步点也会让文件变大\n                if (i % 10 == 0) {\n                    writer.sync();//如果是10的个数，那个添加一个同步点\n                }\n            }\n\n            for (int i = 0; i < 10; i++) {\n                if (i % 2 == 0 || i % 3 == 0) {\n                    writer.append(new IntWritable(i), new Text(\"ivanl00\"+i));\n                }\n\n            }\n\n            writer.close();\n        } finally {\n            //IOUtils.closeStream(writer);\n        }\n    }\n\n}\n\n```"
    }
  ]
}
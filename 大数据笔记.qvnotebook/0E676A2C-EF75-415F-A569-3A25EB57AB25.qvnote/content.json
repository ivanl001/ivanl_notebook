{
  "title": "01-Java基础-0104-自带压缩和解压缩",
  "cells": [
    {
      "type": "markdown",
      "data": "> 在java中使用压缩和解压缩就比较简单了，直接使用ZipInputStream和ZipOutputStream即可"
    },
    {
      "type": "markdown",
      "data": "```java\npackage im.ivanl001.bigData.java_01;\n\nimport im.ivanl001.bigData.java_01.IMUtils.IMZipAndUnzipUtils;\nimport org.junit.Test;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-10-12 13:43\n * #description : java自带的压缩和解压缩\n **/\npublic class A06_ZipInput0OutputSteam {\n\n\n    @Test\n    public void zipToZBLTest() throws Exception {\n\n//        String fromPath01 = \"/Users/ivanl001/Desktop/from/01.jpg\";\n//        String fromPath02 = \"/Users/ivanl001/Desktop/from/02.jpg\";\n//        String fromPath03 = \"/Users/ivanl001/Desktop/from/03.jpg\";\n//        String fromPath04 = \"/Users/ivanl001/Desktop/from/04.jpg\";\n//        String fromPath05 = \"/Users/ivanl001/Desktop/from/05.jpg\";\n        String fromPath06 = \"/Users/ivanl001/Desktop/from/nginx.conf\";\n\n\n        String[] path = new String[1];\n//        path[0] = fromPath01;\n//        path[1] = fromPath02;\n//        path[2] = fromPath03;\n//        path[3] = fromPath04;\n//        path[4] = fromPath05;\n        path[0] = fromPath06;\n        IMZipAndUnzipUtils.zipToZBL(path, \"/Users/ivanl001/Desktop/to\");\n    }\n    \n    \n    @Test\n    public void unzipTest() throws Exception {\n\n        IMZipAndUnzipUtils.unzip(\"/Users/ivanl001/Desktop/to/from.zbp\");\n\n    }\n}\n\n```"
    },
    {
      "type": "markdown",
      "data": "```java\npackage im.ivanl001.bigData.java_01.IMUtils;\n\nimport java.io.*;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-10-12 13:44\n * #description : 系统自带的压缩和解压缩封装过程\n * #  异常这里直接抛出了，如果用到的时候自己处理吧\n **/\npublic class IMZipAndUnzipUtils {\n\n    public static final String suffix = \".zbp\";\n\n    public static void zipToZBL(String[] fromPath, String toPath) throws Exception {\n\n        File file01 = new File(fromPath[0]);\n        String[] parentArr01 = file01.getParent().split(\"/\");\n        String folderName = parentArr01[parentArr01.length-1];\n        String finalToPath = toPath + \"/\" + folderName + suffix;\n\n        //因为输出流一直在用，所以不要在循环内部创建，因为在内部创建，在内部销毁， 那么循环多的时候就会进行频繁的创建对象\n        FileOutputStream outputStream = new FileOutputStream(finalToPath, true);\n        ZipOutputStream zipOutputStream = null;\n\n\n        for (int i=0;i<fromPath.length;i++) {\n\n            File file = new File(fromPath[i]);\n            String path = fromPath[i];\n            System.out.println(finalToPath);\n\n            //输入流读取文件\n            BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(file));\n\n            //输出流用于输出文件\n            zipOutputStream = new ZipOutputStream(outputStream);\n            zipOutputStream.putNextEntry(new ZipEntry(file.getName()));\n\n            byte[] bytes = new byte[1024];\n            int len = 0;\n            while ((len = bufferedInputStream.read(bytes)) != -1) {\n                zipOutputStream.write(bytes, 0, len);\n            }\n\n            //一个文件结束，那么关闭当前的entry即可\n            zipOutputStream.closeEntry();\n            bufferedInputStream.close();\n        }\n\n        zipOutputStream.close();\n        outputStream.close();\n    }\n\n    public static void unzip(String fromPath) throws Exception{\n\n\n        File file = new File(fromPath);\n        String baseDir = file.getParent();\n        String name = file.getName();\n        String folderPath = baseDir + \"/\" + name.split(suffix)[0];\n\n        File file1 = new File(folderPath);\n        if (!file1.isDirectory()) {\n            file1.mkdir();\n        }\n\n        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(fromPath));\n\n        byte[] bytes = new byte[1024];\n        int len = 0;\n        ZipEntry zipEntry = null;\n        while ((zipEntry = zipInputStream.getNextEntry()) != null) {\n            String fileName = zipEntry.getName();\n            BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(folderPath + \"/\" + fileName));\n\n            while ((len = zipInputStream.read(bytes)) != -1) {\n                bufferedOutputStream.write(bytes, 0, len);\n            }\n            bufferedOutputStream.close();\n        }\n        zipInputStream.close();\n\n    }\n\n}\n\n```"
    }
  ]
}
{
  "title": "14-Calllog项目-03:协处理器和web可视化",
  "cells": [
    {
      "type": "markdown",
      "data": "> 08, 协处理器处理被叫等\n\n> 09, web可视化\n "
    },
    {
      "type": "markdown",
      "data": "## 08, 协处理器处理被叫等\n\n*首先有两个地方需要协处理器处理：第一存储主叫的时候我们需要用协处理器相应的存储一条被叫的信息，这条信息的值是主叫的rowkey；第二，在读取的时候，需要找到主叫的rowkey后再次找到rowkey的值从来找到被叫信息所需要的字段值*\n\n* 01，存储和读取都在如下代码中：\n```java\npackage im.ivanl001.calllogs;\n\nimport org.apache.hadoop.hbase.Cell;\nimport org.apache.hadoop.hbase.TableName;\nimport org.apache.hadoop.hbase.client.*;\nimport org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;\nimport org.apache.hadoop.hbase.coprocessor.ObserverContext;\nimport org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\nimport org.apache.hadoop.hbase.regionserver.InternalScanner;\nimport org.apache.hadoop.hbase.regionserver.wal.WALEdit;\nimport org.apache.hadoop.hbase.util.Bytes;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-12-17 15:11\n * #description :\n **/\npublic class IMCorprocessor extends BaseRegionObserver {\n\n    private String tableNameStr = \"ns3:calllogs\";\n    private String refKey = \"refRowkey\";\n\n    //通过这个方法来在查询的时候获取被叫相关的信息\n    @Override\n    public boolean postScannerNext(ObserverContext<RegionCoprocessorEnvironment> e, InternalScanner s, List<Result> results, int limit, boolean hasMore) throws IOException {\n\n        boolean scannerNext = super.postScannerNext(e, s, results, limit, hasMore);\n\n        //新集合\n        List<Result> newList = new ArrayList<Result>();\n\n        //获得表名\n        String tableName = e.getEnvironment().getRegion().getRegionInfo().getTable().getNameAsString();\n\n        //判断表名是否是ns3:calllogs\n        if (tableName.equals(tableNameStr)) {\n\n            Table table = e.getEnvironment().getTable(TableName.valueOf(tableNameStr));\n\n            for(Result result : results){\n\n                //rowkey\n                String rowkey = Bytes.toString(result.getRow());\n                String flag = rowkey.split(\",\")[3] ;\n\n                //主叫\n                if(flag.equals(\"0\")){\n                    //如果是主叫，就把原先的结果返回回去即可\n                    newList.add(result) ;\n                }\n                //被叫\n                else{\n                    //取出主叫号码\n                    byte[] refrowkey = result.getValue(\"f2\".getBytes(), refKey.getBytes()) ;\n                    Get newGet = new Get(refrowkey);\n                    newList.add(table.get(newGet));\n                }\n            }\n            //注意：这里一定要清空\n            results.clear();\n            results.addAll(newList);\n        }\n        return scannerNext;\n    }\n\n    //通过这个方法来处理存入一条主叫信息的时候同时保存对应的被叫信息\n    @Override\n    public void postPut(ObserverContext<RegionCoprocessorEnvironment> e, Put put, WALEdit edit, Durability durability) throws IOException {\n\n        //00, 调用父类方法\n        super.postPut(e, put, edit, durability);\n\n        //01，判断是否是我们需要处理的表\n        TableName tableName = TableName.valueOf(tableNameStr);\n        String tableNameStr = e.getEnvironment().getRegionInfo().getTable().getNameAsString();\n        if (!tableNameStr.equals(tableName.getNameAsString())) {\n            return;\n        }\n\n        //02, rowkey, 并放行被叫\n        String rowkey = Bytes.toString(put.getRow()) ;\n        //如果被叫就放行\n        String[] arr = rowkey.split(\",\");\n        if (arr[3].equals(\"1\")) {\n            return;\n        }\n\n        //03，处理hashcode,caller,time,flag,callee,duration\n        String caller = arr[1] ;        //主叫\n        String time = arr[2] ;      //通话时间\n        String callee = arr[4] ;        //被叫\n        String durationStr = arr[5] ;  //通话时长\n        //这里传入两个时间，第一个时间是用来截取后计算区域值，第二个是放在rowkey中的\n        String regionNo01 = IMRowKeyUtils.getHashcode(callee, time);\n\n        //04，组建新的rowkey\n        String rowKey01 = regionNo01 + \",\" + callee + \",\" + time + \",\" + \"1\" + \",\" + caller + \",\" + durationStr;\n\n        //05，开始存数据\n        Put negativePut = new Put(rowKey01.getBytes());\n        negativePut.addColumn(Bytes.toBytes(\"f2\"), Bytes.toBytes(refKey), Bytes.toBytes(rowkey));\n        Table table = e.getEnvironment().getTable(tableName);\n        table.put(negativePut);\n    }\n}\n```\n\n* 02, 上面需要用到的一个工具类如下：\n```java\npackage im.ivanl001.calllogs;\n\nimport java.text.DecimalFormat;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-12-17 13:42\n * #description :\n **/\npublic class IMRowKeyUtils {\n\n    private static DecimalFormat decimalFormat = new DecimalFormat(\"00\");\n\n    public static String setupRowkey(String calller, String startTimeStr, String theTimeStr) {\n        return getHashcode(calller, startTimeStr) + \",\" + calller + \",\" + theTimeStr;\n    }\n\n    public static String getHashcode(String caller ,String callTime){\n        int len = caller.length();\n        //取出后四位电话号码\n        String last4Code = caller.substring(len - 4);\n        //取出时间单位,年份和月份.\n        String mon = callTime.substring(0,6);\n        //这里是通过亦或的方式，这里不是很明白这里的和之前的hashcode的区别，应该都可以,我们这里假设分有100个区\n        int hashcode = (Integer.parseInt(mon) ^ Integer.parseInt(last4Code)) % 100 ;\n        return decimalFormat.format(hashcode);\n    }\n}\n```\n\n* 03, 以上代码打成jar包发送到hbase的lib目录下，然后在hbase-site.xml中设置协处理器即可，这样就算是hbase shell中也能按照协处理器显示结果的哈\n"
    },
    {
      "type": "markdown",
      "data": "## 09, web可视化\n*这里代码比较多，不放代码了，需要的话我后续传到github上*"
    }
  ]
}
{
  "title": "14-Calllog项目-01:生成数据,flume收集,kafka生产",
  "cells": [
    {
      "type": "markdown",
      "data": "> 1, 生成数据\n\n> 2, 启动kafka\n\n> 3, 启动flume"
    },
    {
      "type": "markdown",
      "data": "## 1，生成数据\n* 01， java编写代码生成电话log，具体如下:\n```java\npackage im.ivanl001.CallLogGenSys;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\n\n/**\n * #author      : ivanl001\n * #creator     : 2018-12-14 12:13\n * #description : 日志生成程序\n **/\npublic class GenApp {\n\n    public static List<String> phoneNumbers = new ArrayList<String>();\n    public static Map<String,String> callers = new HashMap<String, String>();\n    static{\n        callers.put(\"158****2493\", \"a\");\n        callers.put(\"180****6806\", \"b\");\n        callers.put(\"151****9601\", \"c\");\n        callers.put(\"132****1119\", \"d\");\n        callers.put(\"150****3356\", \"e\");\n        callers.put(\"177****8562\", \"f\");\n        callers.put(\"153****5369\", \"g\");\n        callers.put(\"157****8050\", \"g\");\n        callers.put(\"156****1525\", \"i\");\n        callers.put(\"157****3030\", \"j\");\n        callers.put(\"186****1020\", \"k\");\n        callers.put(\"157****8446\", \"l\");\n        callers.put(\"133****9505\", \"m\");\n        callers.put(\"135****0665\", \"n\");\n        callers.put(\"183****9432\", \"o\");\n        callers.put(\"135****4983\", \"p\");\n        callers.put(\"183****2075\", \"q\");\n        callers.put(\"186****2711\", \"r\");\n        phoneNumbers.addAll(callers.keySet());\n    }\n\n    public static void main(String[] args) throws Exception {\n        genCallLogs(args[0]);\n    }\n\n    private static void genCallLogs(String path) {\n\n        FileWriter fileWriter = null;\n        try{\n\n            fileWriter = new FileWriter(new File(path), true);\n            while (true) {\n\n                //0, 随机对象\n                Random random = new Random();\n\n                //1，随机取出一个号码当作主叫\n                String caller = phoneNumbers.get(random.nextInt(callers.size()));\n\n                //2，取不是主叫号码的另外一个随机号码\n                String callee = \"\";\n                while (true) {\n                    callee = phoneNumbers.get(random.nextInt(callers.size()));\n                    //如果不相等就跳出去相当于选出来了\n                    if (!callee.equals(caller)) {\n                        break;\n                    }\n                }\n\n                //3，通话时长\n                int duration = random.nextInt(100);\n                DecimalFormat decimalFormat = new DecimalFormat(\"00\");\n                String durationStr = decimalFormat.format(duration);\n\n                //4,通话时间设定\n                //通话时间\n                int year = 2018;\n                //月份(0~11)\n                int month = random.nextInt(12);\n                //天,范围(1~31)\n                int day = random.nextInt(29) + 1;\n                int hour = random.nextInt(24);\n                int min = random.nextInt(60);\n                int sec = random.nextInt(60);\n\n                Calendar c = Calendar.getInstance();\n                c.set(Calendar.YEAR, year);\n                c.set(Calendar.MONTH, month);\n                c.set(Calendar.DAY_OF_MONTH, day);\n                c.set(Calendar.HOUR_OF_DAY, hour);\n                c.set(Calendar.MINUTE, min);\n                c.set(Calendar.SECOND, sec);\n                Date date = c.getTime();\n\n                Date now = new Date();\n                if (date.compareTo(now) > 0) {\n                    date = now;\n                }\n\n                SimpleDateFormat dfs = new SimpleDateFormat();\n                dfs.applyPattern(\"yyyyMMddHHmmss\");\n                //通话时间\n                String dateStr = dfs.format(date);\n\n                //5, 通话log格式设定\n                String log = caller + \",\" + callee + \",\" + dateStr + \",\" + durationStr;\n\n                System.out.println(log);\n                //注意：这里要换行\n                fileWriter.write(log + \"\\n\");\n                fileWriter.flush();\n                Thread.sleep(500);\n\n            }\n        }catch (Exception e){\n            try {\n                fileWriter.write(e.getMessage());\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }finally {\n            try {\n                fileWriter.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 02, 打成jar包，放到有flume搜集服务器上,执行以下命令开始执行java代码, 日志会生成到/data/calllogs/calllogs.txt中去\n  > java -cp ./CallLog_gen_sys.jar im.ivanl001.CallLogGenSys.GenApp /data/calllogs/calllogs.txt\n\n  ###### 这个是我自己写的一个启动命令，请忽视\n  > /root/ivanl001/bin/genCalllog.sh   "
    },
    {
      "type": "markdown",
      "data": "## 2， 启动kafka，创建主题\n* 01，kafka依赖zk，所以启动kafka之前需要先启动zk\n*需要在所选服务器上分别执行如下命令，同时可以通过第二个命令查看zk状态*\n\n  > zkServer.sh start \n  \n  > zkServer.sh status\n  \n* 02, 启动kafka集群\n*需要在所选服务器上分别执行如下命令*\n  > kafka-server-start.sh /usr/local/kafka/config/server.properties &\n\n* 03, 创建所需要的kafka主题，方便flume把收集到的数据发送过来\n*4个分区，三个副本因子，也即是分成4个区，每个区保存3个副本*\n  > kafka-topics.sh --create --zookeeper slave01:2181 --replication-factor 3 --partitions 4 --topic calllogs\n\n* 04, 查看主题\n  > kafka-topics.sh --list --zookeeper slave01:2181\n\n* 05, 为了方便测试，我们这里先启动控制台消费者，消费刚才创建的calllogs主题\n  > kafka-console-consumer.sh --bootstrap-server slave01:9092 --topic calllogs --from-beginning --zookeeper slave02:2181\n\n* 06, 这里顺便给出开启生产者的方式以便调试的时候使用\n  > kafka-console-producer.sh --broker-list slave01:9092 --topic calllogs"
    },
    {
      "type": "markdown",
      "data": "## 3, 配置flume收集来自log文件原先数据和之后的流数据，并设置sink为kafka\n* 01，编写flume的配置文件，从log文件接受，传输到kafka中去\n\n  ```shell\n  # 0, 首先指定三种组件：源,通道,槽\n  agent.sources = r1\n  agent.channels = c1\n  agent.sinks = k1\n  \n  \n  # 1, 定义source相关信息，绑定流入的数据， 并制定输出的方向\n  agent.sources.r1.type = exec\n  # 默认是最后十行,如果想要从头收集需要用-c +0, 同时-F是持续收集\n  agent.sources.r1.command = tail -F -c +0 /data/calllogs/calllogs.txt\n  agent.sources.r1.channels = c1\n  \n  \n  # 2, 定义channel相关的信息, 这里不需要制定输出，而是让sink指定输入的\n  agent.channels.c1.type = memory\n  \n  \n  # 3, 定义sink相关的信息\n  agent.sinks.k1.channel = c1\n  agent.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink\n  agent.sinks.k1.kafka.bootstrap.servers = slave01:9092 slave02:9092 slave03:9092\n  agent.sinks.k1.kafka.topic = calllogs\n  agent.sinks.k1.kafka.flumeBatchSize = 20\n  agent.sinks.k1.kafka.producer.acks = 1\n  ```\n\n* 02, 使用刚才的配置文件启动flume\n  > flume-ng agent -n agent -c conf -f /root/flume/conf/myConf/logs-flume-kafka.properties &\n\n* 03，启动成功后jps可以看到多了一个Application的进程？线程？"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}
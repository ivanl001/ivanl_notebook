{
  "title": "01-Java基础-0202-list,map,set",
  "cells": [
    {
      "type": "markdown",
      "data": "## 1，List\n### 有序，可重复"
    },
    {
      "type": "markdown",
      "data": "### 1.1， ArrayList\n* 有索引，顺序存储的，默认的长度是10，写入数量超过10之后通过固定的算法进行容量提升。但是并不适合大批量写入操作，因为对于ArrayList大批量写入的话，会不断的进行复制到新的空间上。但是读取速度是非常快的， 因为是有索引的，通过索引可以直接找到某个元素\n* 所以ArrayList适合大批量读取，不适合大批量写入。\n* 创建的时候默认是10个容量，会有算法在需要的时候进行适当的增加容量，但是代价是copy，也就是每次容量增加都是重新拷贝到新的存储空间\n* 所以说读取速度快，但是插入速度慢\n"
    },
    {
      "type": "markdown",
      "data": "### 1.2， LinkedList\n* 链表结构，在元素位置存储有前面一个元素，后面一个元素等位置信息，所以在插入的时候只需要断开这个链接，重新组合即可，插入速度是极快的。因为是链表型的，读取的时候需要从头开始通过链表进行查找，没有ArrayList的索引查找，所以速度比较慢。\n* 所以链表适合大批量写入，不适合大批量读取。\n* Node节点接通前元素和后元素\n* "
    },
    {
      "type": "markdown",
      "data": "## 2，Map\n### key(set)-value\n"
    },
    {
      "type": "markdown",
      "data": "### 2.1, HashMap\n* HashMap其实是有ArrayList和LinkedList来的，\n* 初始化有16个桶，加载率0.75，也即是12个，每个桶内通过Node链接上下元素，所以既有所以查询速度快的优点，又有链表的插入优点\n* 单向链表 ？？？"
    },
    {
      "type": "markdown",
      "data": "### 2.2, LinkedHashMap\n* LinkedHashMap也是一个HashMap,但是内部维持了一个双向链表,可以保持顺序\n* 在遍历的时候会比HashMap慢，不过有种情况例外：当HashMap容量很大，实际数据较少时，遍历起来可能会比LinkedHashMap慢。因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。"
    },
    {
      "type": "markdown",
      "data": "## 3，Set\n### Set简单理解就是Map，只不过map的值为null"
    }
  ]
}
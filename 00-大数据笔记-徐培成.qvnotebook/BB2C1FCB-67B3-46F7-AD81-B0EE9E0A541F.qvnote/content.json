{
  "title": "03-Hadoop-1011-表级锁及数据库语句",
  "cells": [
    {
      "type": "markdown",
      "data": "## 1，表级锁\n> 锁定， 哈哈，注意：如果这里锁定了之后没有解锁，其他的数据都暂时插不进去了，所以生产环境千万别乱来\n\n`lock table users write;`//锁定之后其他客户端是不能写入，也不能读取的，需要等待\n\n> 解锁，结果只能在加锁的客户端上进行\n\n`unlock tables;`\n"
    },
    {
      "type": "markdown",
      "data": "## 2，连接查询\n\n* 01， 笛卡尔积，也叫做组合查询,没有连接条件，这种其实没啥用处，用下面的举例来说，所有的用户对应每一条订单(不管是谁的)，然后显示出来，比如说四个用户，订单中一共10条订单，所以一共会展示出来40条订单，没啥实际意义\n`select a.*, b.* from customers as a, orders as b;`\n\n* 02，内连接查询, 这种情况下，没有订单的客户和没有客户的订单都不会查出来\n`select a.*, b.* from customers as a, orders as b where a.id = b.cid;`\n\n\n* 03，外连接\n    * 左外连接 \n    * 这样会优先显示左边的(就算右边的那些条件没有对应上也会显示左边)，比如说下面这个，左边的是customers表，所以没有订单的用户也会显示出来\n    `select a.*, b.* from customers as a left outer join orders as b on a.id = b.cid;`\n    * 右外连接，优先显示右边的，这里右边的是订单，所以就算订单没有对应上的用户，也会显示出来，当然订单肯定会有用户，这里只是演示用的，不必在乎逻辑严谨性\n    `select a.*, b.* from customers as a right outer join orders as b on a.id = b.cid;`"
    },
    {
      "type": "markdown",
      "data": "## 3，查询语法\n> select ... from ... where ... group by ... having ... order by ... limit ... for update\n>-------字段-----表名------条件--------分组----组内条件----排序---分页----锁定"
    },
    {
      "type": "markdown",
      "data": "### 3.1， 去重 disctinct\n> select distinct price, cid from orders;//这个是对组合去重，而不是对单一字段去重，这里代表是价格和cid都是一样的话算是重复"
    },
    {
      "type": "markdown",
      "data": "### 3.2， 条件 where\n> select * from orders where price > 12.25;"
    },
    {
      "type": "markdown",
      "data": "### 3.3, 聚合查询：最大值，最小值，平均值, 总和，个数\n> select max(price) from orders;\n> select min(price) from orders;\n> select avg(price) from orders;\n> select sum(price) from orders;\n> select count(price) from orders;\n"
    },
    {
      "type": "markdown",
      "data": "### 3.4， 分组， 比如查询每个用户-该用户订单的最大金额和最小金额,cid是用户id，可以当作用户理解\n> select cid, max(price) from orders where cid is not null group by cid;\n> select cid, max(price), min(price) from orders where cid is not null  group by cid;\n// 注意：不能这样查询, 因为先分组，分完组之后，可以求最大值，最小值，cid(一个组里面cid都是相同的)，但是orderno是不一样的，这样子是不能对应出最大金额订单号和最小金额订单号的哦：\nselect cid, orderno, max(price), min(price) from orders where cid is not null  group by cid;"
    },
    {
      "type": "markdown",
      "data": "### 3.5，分组之后再加过滤条件，比如数之前求用户订单最大金额，现在要求显示最大金额大于20的\n* 下面的语句也可以使用别名哈，懒，不想改了\n> select cid, max(price), min(price) from orders where cid is not null  group by cid having max(price) > 15"
    },
    {
      "type": "markdown",
      "data": "### 3.6，过滤之后还要按照价格降序排列\n> select cid, max(price) as max_price, min(price) from orders where cid is not null  group by cid having max_price > 15 order by max_price desc;"
    },
    {
      "type": "markdown",
      "data": "### 3.7, 过滤之后就剩两条，就不分页了，直接用全订单表分页了\n> select * from orders limit 3; //前3条\n> select * from orders limit 3,3; //从第三条开始，限制三条"
    },
    {
      "type": "markdown",
      "data": "### 3.8，子查询, 这里查询那些客户没有订单\n> select * from customers where id not in (select distinct cid from orders where cid is not null);"
    },
    {
      "type": "markdown",
      "data": "### 3.9, 模糊查询\n> select * from customers where name like 'tom%';"
    },
    {
      "type": "markdown",
      "data": "### 3.10, 范围查询\n> select * from customers where id in (1,2);\n> select * from customers where id not in (1,2);\n> select * from customers where id between 1 and 3;//这里是闭区间"
    },
    {
      "type": "markdown",
      "data": "### 3.11，嵌套查询 \n* 01，查询订单数量大于2的所有用户\n> select * from customers where id in (select cid from orders group by cid having count(cid) > 2);\n* 02,这个很重要：要求：查询出用户信息，用户的订单数量，需要订单数量大于2\n* 查不出来😿\n> "
    },
    {
      "type": "markdown",
      "data": "### 3.12， \n> alter orders add column area int;//新加个字段\n* 可以同时对多个字段进行分组排序\n> select cid, area, count(price) from orders group by cid, area order by cid asc, area desc;\n* 还可以顺便求出最大值最小值\n> select cid, area, count(price), max(price), min(price) from orders group by cid, area order by cid asc, area desc;"
    },
    {
      "type": "markdown",
      "data": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}
{
  "title": "08-Flume-0103-flumeSource",
  "cells": [
    {
      "type": "markdown",
      "data": "## 1, netcat\n\n* 01,配置文件，配置文件改名为flume-netcat-conf.properties\n  ```shell\n  # 0, 首先指定三种组件：源,通道,槽\n  agent.sources = r1\n  agent.channels = c1\n  agent.sinks = k1\n  \n  # 1, 定义source相关信息，绑定流入的数据， 并制定输出的方向\n  agent.sources.r1.type = netcat\n  agent.sources.r1.bind = localhost\n  agent.sources.r1.port = 8888\n  agent.sources.r1.channels = c1\n  \n  # 2, 定义channel相关的信息, 这里不需要制定输出，而是让sink指定输入的\n  agent.channels.c1.type = memory\n  \n  # 3, 定义sink相关的信息\n  agent.sinks.k1.channel = c1  \n  agent.sinks.k1.type = logger\n  ```\n  \n* 02,启动\n  > flume-ng agent -n agent -c conf -f /usr/local/flume/conf/myConf/flume-netcat-conf.properties\n\n\n\n## 2，Sequence Generator Source，这个案例的具体用途不是很明白\n  *A simple sequence generator that continuously generates events with a counter that starts from 0, increments by 1 and stops at totalEvents. Retries when it can’t send events to the channel. Useful mainly for testing.*\n\n* 01, 配置文件，重新命名为flume-seq-conf.properties\n  ```shell\n  # 0, 首先指定三种组件：源,通道,槽\n  agent.sources = r1\n  agent.channels = c1\n  agent.sinks = k1\n  \n  \n  # 1, 定义source相关信息，绑定流入的数据， 并制定输出的方向\n  # totalEvents可以不必设定\n  agent.sources.r1.type = seq\n  agent.sources.r1.totalEvents = 1000\n  agent.sources.r1.channels = c1\n  \n  \n  # 2, 定义channel相关的信息, 这里不需要制定输出，而是让sink指定输入的\n  agent.channels.c1.type = memory\n  \n  \n  # 3, 定义sink相关的信息\n  agent.sinks.k1.channel = c1\n  agent.sinks.k1.type = logger\n  ```\n  \n* 02, 启动, -Dflume.root.logger=INFO,console这个加不加好像都行\n  > flume-ng agent -n agent -c conf -f flume-seq-conf.properties -Dflume.root.logger=INFO,console\n  \n## 3，Spooling Directory Source，也就是检测文件夹\n*This source lets you ingest data by placing files to be ingested into a “spooling” directory on disk. This source will watch the specified directory for new files, and will parse events out of new files as they appear.*\n\n* 01, 配置文件，重新命名为flume-spooldir-conf.properties\n  ```shell\n  # 0, 首先指定三种组件：源,通道,槽\n  agent.sources = r1\n  agent.channels = c1\n  agent.sinks = k1\n  \n  \n  # 1, 定义source相关信息，绑定流入的数据， 并制定输出的方向\n  agent.sources.r1.type = spooldir\n  agent.sources.r1.spoolDir = /data/flume/testData\n  agent.sources.r1.channels = c1\n  \n  \n  # 2, 定义channel相关的信息, 这里不需要制定输出，而是让sink指定输入的\n  agent.channels.c1.type = memory\n  \n  \n  # 3, 定义sink相关的信息\n  agent.sinks.k1.channel = c1\n  agent.sinks.k1.type = logger\n  ```\n  \n* 02, 启动, -Dflume.root.logger=INFO,console这个加不加好像都行\n  > flume-ng agent -n agent -c conf -f flume-spooldir-conf.properties -Dflume.root.logger=INFO,console"
    },
    {
      "type": "markdown",
      "data": "## 4, Exec Source, 实时收集\n\n* 01, 配置文件，重新命名为flume-exec-conf.properties\n  ```shell\n  # 0, 首先指定三种组件：源,通道,槽\n  agent.sources = r1\n  agent.channels = c1\n  agent.sinks = k1\n  \n  \n  # 1, 定义source相关信息，绑定流入的数据， 并制定输出的方向\n  agent.sources.r1.type = exec\n  agent.sources.r1.command = tail -f /data/flume/testData/log4j.properties\n  agent.sources.r1.channels = c1\n  \n  \n  # 2, 定义channel相关的信息, 这里不需要制定输出，而是让sink指定输入的\n  agent.channels.c1.type = memory\n  \n  \n  # 3, 定义sink相关的信息\n  agent.sinks.k1.channel = c1\n  agent.sinks.k1.type = logger\n  ```\n  \n* 02, 启动, -Dflume.root.logger=INFO,console这个加不加好像都行\n  > flume-ng agent -n agent -c conf -f flume-exec-conf.properties -Dflume.root.logger=INFO,console\n"
    },
    {
      "type": "markdown",
      "data": "## 5，Stress Source\n*这个是压力源，应该主要是用来做压力测试的， 我也不懂，先放着*\n\n* 01, 配置文件，重新命名为flume-stress-conf.properties\n  ```shell\n  # 0, 首先指定三种组件：源,通道,槽\n  agent.sources = r1\n  agent.channels = c1\n  agent.sinks = k1\n  \n  \n  # 1, 定义source相关信息，绑定流入的数据， 并制定输出的方向\n  agent.sources.r1.type = org.apache.flume.source.StressSource\n  a1.sources.r1.size = 10240\n  a1.sources.r1.maxTotalEvents = 1000000\n  a1.sources.r1.channels = memoryChannel-1\n  agent.sources.r1.channels = c1\n  \n  \n  # 2, 定义channel相关的信息, 这里不需要制定输出，而是让sink指定输入的\n  agent.channels.c1.type = memory\n  \n  \n  # 3, 定义sink相关的信息\n  agent.sinks.k1.channel = c1\n  agent.sinks.k1.type = logger\n  ```\n  \n* 02, 启动, -Dflume.root.logger=INFO,console这个加不加好像都行\n  > flume-ng agent -n agent -c conf -f flume-exec-conf.properties -Dflume.root.logger=INFO,console\n\n"
    }
  ]
}
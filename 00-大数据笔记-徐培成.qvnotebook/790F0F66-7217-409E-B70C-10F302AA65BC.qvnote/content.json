{
  "title": "03-Hadoop-1001-数据库加强",
  "cells": [
    {
      "type": "markdown",
      "data": "## 1.1，事务的特性acid\n* a atomic, 原子性， 不可分割，要么全成功，要么全失败\n* c consistent 一致性， 事务操作之后，数据保持一致，不能破坏掉\n* i isolation  隔离性，事务并发执行，每个事务都是独立的\n* d duration   持久性， 一旦提交，不能更改，永久有效\n\n\n事务机制可以确保数据一致性。\n\n事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。\n\n* 原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。\n* 一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。\n* 隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。\n* 持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。\n\n\n## 1.2, 事务的操作\n* commit    提交\n* rollback  回滚\n* savePoint 保存点，也就是部分回滚\n\n## 1.3，说明\n* sql默认是事务自动提交的，也就是statement.execute(sqlStr);执行一次，提交一次。如果需要批量执行，比如说执行一万条，可以关闭自动提交，在10000条执行结束再进行手动提交\n"
    },
    {
      "type": "markdown",
      "data": "## 2，数据仓库和数据库\n* hive是数据仓库，OLAP， online analyze process, 在线分析处理，延迟性高\n* 数据库， OLTP， online transaction process, 在线事务处理， 实时性比较好"
    },
    {
      "type": "markdown",
      "data": "## 3，存储过程\n\n* 存储过程\n  ```sql\n  # batchInsert存储过程\n  CREATE DEFINER=`root`@`localhost` PROCEDURE `batchInsert`(in theCount INT)\n  BEGIN\n    #Routine body goes here...\n  -- \tDECLARE email VARCHAR(20);\n  -- \tDECLARE passwd VARCHAR(20);\n  \tDECLARE i int DEFAULT 0;\n  \t\n  \tWHILE i<theCount DO\n  \t\tinsert into users (email, password) values ('13918667287@139.com','0000');\n  \t  set i := i + 1;\n    END WHILE;\n  \n  END\n  ```\n\n* 显示存储过程\n  > show procedure status\n\n* 调用方式\n  > call batchInsert(1000)\n\n\n"
    },
    {
      "type": "markdown",
      "data": "## 4，函数\n* 函数要有返回值， 需要用returns， 加s\n* 不需要有in或者out，因为参数都是in，返回值就是out\n\n* 函数\n  ```mysql\n  CREATE DEFINER=`root`@`localhost` FUNCTION `imSumFunc`(a int, b int ) RETURNS int(11)\n  BEGIN\n  #Routine body goes here...\n\t\tRETURN a + b;\n  END\n  ```\n\n* 显示函数\n  > show function status\n\n* 调用函数\n  > SELECT imSumFunc(3, 10)"
    },
    {
      "type": "markdown",
      "data": "## 5， 事务并发出现的现象\n*注意：前提是事务并发，也就是两个事务同时执行的时候出现的现象*\n* 脏读        就是并发的两个事务，一个事务能读到另外一个事务中还没有提交的数据\n* 不可重复读  就是并发的两个事务， 一个事务能够读到另外一个事务提交的更新操作，不可重复度其实就是可能重复读的时候两次读的值就不一样了\n* 幻读        就是并发的两个事务，一个事务能够读到另外一个事务提交的插入操作，幻读就是可能会读出来幻想出来的数据，毕竟同一个事务里面，第二次读的多了或者少了\n\n> set session transaction isolation level read uncommitted; //\n> set session transaction isolation level read committed;   //可防止脏读\n下面这个是默认的：\n> set session transaction isolation level repeatable read;  //可防止不可重复读(其实这里直接防止了幻读)\n> set session transaction isolation level serializable;     //可防止幻读\n\n![数据库.png](quiver-image-url/A5A993F6874EAA0247F1EB56BBAC3BE6.png =1158x3072)\n"
    },
    {
      "type": "markdown",
      "data": "### 验证步骤：\n* 01，先关闭自动提交，要不然直接自动提交，也就没有事务并发的体现了\n`set autocommit=0;`\n* 02, mysql默认的隔离级别不记得是啥了，反正是默认情况下不会有脏读情况，所以需要手动的开启事务，提交事务才能显示出来脏读情况"
    },
    {
      "type": "markdown",
      "data": "### 5.1，验证脏读\n\n* 00, 在操作之前都先提交一下以免之前的事务没有提交\n`commit;`\n\n* 01，首先需要关闭两个客户端的自动提交\n`set autocommit=0;`\n\n* 02, A客户端开始事务，执行插入或更新操作，不要提交\n`start transaction;`\n`insert into users (email, password) values (\"1233211234567@123.com\", \"000000\");`\n\n* 03, 设置B客户端的隔离级别为读未提交，显示出来脏读情况, 然后开启事务\n`set session transaction isolation level read uncommitted;`\n`start transaction;`\n\n* 04, 查询记录，就可以查处A客户端未提交的数据\n`select * from users;`\n\n* 05，A进行rollback，B再读取，又能读取之前的数值\n`A: rollback;`\n`B: select * from users;`\n\n\n* 避免脏读只需要设置隔离界别为读已提交\n`set session transaction isolation level read committed;`\n"
    },
    {
      "type": "markdown",
      "data": "### 5.2，验证不可重复读\n* 脏读其实就是没有提交的另外一个事务中也能读到，不可重复读*\n\n* 00, 注意：还是A，B都先提交一下，以免有其他事务还未提交\n`commit;`\n\n* 01，A开启事务，执行更新操作并提交\n`start transaction;`\n`update users set password = '99999';`\n`commit;`\n\n* 02,B设置隔离级别为读已提交（读已提交是不能防止不可重复读的），并开启事务，进行读取\n`set session transaction isolation level read committed;`\n`start transaction;`\n`select * from users;`//这里是能查到刚才提交的，但是很多情况下，我们很有可能并不想读到，因为同一个事务中两次读取的内容都不一样\n\n* 避免不可重复读只需要设置隔离界别为可重复读\n`set session transaction isolation level repeatable read;`\n\n"
    },
    {
      "type": "markdown",
      "data": "### 5.3，验证幻读\n\n* 00, 注意：还是A，B都先提交一下，以免有其他事务还未提交\n`commit;`\n\n* 01，A开启事务，执行插入操作并提交\n`start transaction;`\n`insert into users (email, password) values (\"1233211234567@123.com\", \"000000\");`\n`commit;`\n\n* 02，B设置隔离级别是可重复读，然后开启事务，进行读取\n`set session transaction isolation level repeatable read;`\n`start transaction;`\n`select * from users;` //这里其实是看不到新增的那条的，因为mysql的repeatable read直接避免了幻读的现象\n\n* 当然虽然已经避免了幻读，但是如果想要安全级更高一些，可以设置串行化，这样子B在读取的时候会直接加锁，A是不能进行写入操作的，A会等待，也就更不可能出现幻读的情况了。\n`set session transaction isolation level serializable;`// 这种情况下是独占写锁，共享读锁,另外线程的写入操作会等待其他线程的读操作提交之后才能完成写入，读操作不提交的情况下，写操作会一直等待\n\n"
    },
    {
      "type": "markdown",
      "data": "### 5.4， 拓展一下\n* serializable： 一方在读，另外一方写入是需要等待的\n* repeatable read： 一方更新，另外一方也要更新同一条记录是需要等待的，是不可能同时更新的。但是在这种情况下，一方在读，另外一方是可以更新或者写入的哈\n* 但是如果隔离级别是repeatable read， 又不想别的事务写入，可以用 for update,这样别的事务写入的时候就会等待\n> select * from users for udapte;\n"
    }
  ]
}